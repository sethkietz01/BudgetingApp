@model List<BudgetingApp.Models.AssetModel>
@{
    ViewData["Title"] = "Home Page";
}


<div class="text-center">
    <h1 class="display-4">View Assets</h1>
</div>

<h3>Monthly Expenses</h3>

<div class="assets-table-div">

    <table id="assets-table">
        <thead>
            @foreach (var asset in Model)
            {
                <tr>
                    <th>Balance</th>
                    <td>$@asset.Balance</td>
                </tr>
                <tr>
                    <th>Income</th>
                    <td>+ $@asset.Income</td>
                </tr>
                <tr>
                    <th>Rent</th>
                    <td>- $@asset.Rent</td>
                </tr>
                <tr>
                    <th>Utilities</th>
                    <td>- $@asset.Utilities</td>
                </tr>
                <tr>
                    <th>Car Payment</th>
                    <td>- $@asset.CarPayment</td>
                </tr>
                <tr>
                    <th>Insurances</th>
                    <td>- $@asset.Insurances</td>
                </tr>
                <tr>
                    <th>Groceries</th>
                    <td>- $@asset.Groceries</td>
                </tr>
                <tr>
                    <th>Gas</th>
                    <td>- $@asset.Gas</td>
                </tr>
                <tr>
                    <th>Subscriptions</th>
                    <td>- $@asset.Subscriptions</td>
                </tr>
                <tr>
                    <th>Other</th>
                    <td>- $@asset.Other</td>
                </tr>
                <tr>
                    <th>Total Expenses</th>
                    <td id="total-expenses">$</td>
                </tr>
                <tr>
                    <th>Net</th>
                    <td id="net">$</td>
                </tr>
            }
        </thead>
    </table>


    <div class="assets-chart-group">
        <canvas id="assetsChart"></canvas>
    </div>
</div>

<div class="form-buttons">
    <div class="add-to-balance-group">
        <label for="amount-to-add">Add to Balance</label>
        <input id="amount-to-add" type="text" placeholder="Type amount here" />
        <button id="add-to-balance-button" class="button" onclick="sendAmountToAdd()">Submit</button>
    </div>

    <div class="subtract-from-balance-group"">
        <label for="amount-to-subtract">Subtract from Balance</label>
        <input id="amount-to-subtract" type="text" placeholder="Type amount here" />
        <button id="subtract-from-balance-button" class="button" onclick="sendAmountToSubtract()">Submit</button>  
    </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
<script>

    document.addEventListener('DOMContentLoaded', function () {
        const assetTables = document.querySelectorAll('.assets-table-div table');

        assetTables.forEach(table => {
            let totalExpenses = 0;
            let totalIncome = 0;

            const expenseLabels = [];
            const expenseData = [];

            const rows = table.querySelectorAll('tr');

            rows.forEach(row => {
                const header = row.querySelector('th')?.textContent.trim();
                const valueCell = row.querySelector('td');
                if (valueCell) {
                    const valueText = valueCell.textContent.trim();
                    const numericValue = parseFloat(valueText.replace(/[^\d.]/g, ''));

                    if (header === 'Balance')
                        balance = numericValue;
                    else if (header === 'Income')
                        totalIncome += numericValue;
                    else if (header === 'Rent' || header === 'Utilities' || header === 'Car Payment' || header === 'Insurances' || header === 'Groceries' || header === 'Gas' ||
                        header === 'Subscriptions' || header === 'Other') {
                        totalExpenses += numericValue;
                        expenseLabels.push(header);
                        expenseData.push(numericValue);
                    }
                    else if (header === 'Total Expenses')
                    {
                        const totalExpensesCell = row.querySelector('#total-expenses');
                        if (totalExpensesCell)
                            totalExpensesCell.textContent = "- $" + totalExpenses.toFixed(2);
                    }
                    else if (header === 'Net') {
                        const netCell = row.querySelector('#net');
                        if (netCell)
                        {
                            var netAmount = totalIncome - totalExpenses;
                            if (netAmount < 0)
                            {
                                netAmount = -1 * netAmount;
                                netCell.textContent = "- $" + netAmount.toFixed(2);
                                netCell.style.color = "red";
                            }
                            else
                            {
                                netCell.textContent = "$" + netAmount.toFixed(2);
                                netCell.style.color = "green";
                            }
                        }
                    }
                }
            });

            if (expenseLabels.length > 0) {
                new Chart("assetsChart", {
                    type: "doughnut",
                    data: {
                        labels: expenseLabels,
                        datasets: [{
                            backgroundColor: [
                                "red", "orange", "yellow", "green", "cyan", "blue", "indigo", "violet"
                            ],
                            borderColor: [ 
                                "black", "black", "black", "black", "black", "black", "black", "black"
                            ],
                            data: expenseData
                        }]
                    },
                    options: {
                        title: {
                            display: true,
                            text: "Cost Breakdown",
                            fontColor: 'white'
                        },
                        legend: { 
                            labels: {
                                fontColor: 'white',
                                borderColor: 'black'
                            }
                        }
                    }
                });
            }
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        const assetTables = document.querySelectorAll('.assets-table-div table');

        assetTables.forEach(table => {
            let totalExpenses = 0;
            let totalIncome = 0;

            const rows = table.querySelectorAll('tr');

            rows.forEach(row => {
                const header = row.querySelector('th')?.textContent.trim();
                const valueCell = row.querySelector('td');
                if (valueCell) {
                    const valueText = valueCell.textContent.trim();
                    const numericValue = parseFloat(valueText.replace(/[^\d.]/g, '')); // Extract number

                    if (header === 'Balance') 
                        balance = numericValue;
                    else if (header === 'Income') 
                        totalIncome += numericValue;
                    else if (header === 'Rent' || header === 'Utilities' || header === 'Car Payment' || header === 'Insurances' || header === 'Groceries' || header === 'Gas' ||
                        header === 'Subscriptions' || header === 'Other') 
                        totalExpenses += numericValue;
                    else if (header === 'Total Expenses') 
                    {
                        const totalExpensesCell = row.querySelector('#total-expenses');
                        if (totalExpensesCell) 
                            totalExpensesCell.textContent = "- $" + totalExpenses.toFixed(2);
                    } 
                    else if (header === 'Net') {
                        const netCell = row.querySelector('#net');
                        if (netCell) 
                        {
                            var netAmount = totalIncome - totalExpenses;
                            if (netAmount < 0) 
                            { 
                                netAmount = -1 * netAmount;
                                netCell.textContent = "- $" + netAmount.toFixed(2);
                                netCell.style.color = "red";
                            }
                            else
                            {
                                netCell.textContent = "$" + netAmount.toFixed(2);
                                netCell.style.color = "green";
                            }
                        }
                    }
                }
            });
        });
    });

    function sendAmountToAdd() {
        const amountToAddInput = document.getElementById('amount-to-add');
        const amountValue = amountToAddInput.value;

        if (!amountValue.trim()) {
            alert('Please enter an amount to add.');
            return;
        }

        fetch('@Url.Action("AddToBalance", "Home")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `amountToAdd=${amountValue}`
        })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                    console.log('Balance updated successfully!');
                } else {
                    console.error('Failed to update balance.');
                    alert('Failed to update balance.');
                }
            })
            .catch(error => {
                console.error('There was an error:', error);
                alert('An error occurred while updating the balance.');
            });
    }

    function sendAmountToSubtract() {
        const amountToSubtractInput = document.getElementById('amount-to-subtract');
        const amountValue = amountToSubtractInput.value;

        if (!amountValue.trim()) {
            alert('Please enter an amount to subtract.');
            return;
        }

        fetch('@Url.Action("SubtractFromBalance", "Home")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `amountToSubtract=${amountValue}`
        })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                    console.log('Balance updated successfully!');
                } else {
                    console.error('Failed to update balance.');
                    alert('Failed to update balance.');
                }
            })
            .catch(error => {
                console.error('There was an error:', error);
                alert('An error occurred while updating the balance.');
            });
    }
</script>
