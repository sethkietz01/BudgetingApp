@model List<BudgetingApp.Models.AssetModel>
@{
    ViewData["Title"] = "Home Page";
}


<div class="text-center">
    <h1 class="display-4">View Assets</h1>
</div>

<h3>Monthly Expenses</h3>

<div class="assets-table-div">

    <table id="assets-table">
        <thead>
            @foreach (var asset in Model)
            {
                <tr>
                    <th>Balance</th>
                    <td>$@asset.Balance</td>
                </tr>
                <tr>
                    <th>Income</th>
                    <td>+ $@asset.Income</td>
                </tr>
                <tr>
                    <th>Savings</th>
                    <td>- $@asset.Savings</td>
                </tr>
                <tr>
                    <th>Rent</th>
                    <td>- $@asset.Rent</td>
                </tr>
                <tr>
                    <th>Utilities</th>
                    <td>- $@asset.Utilities</td>
                </tr>
                <tr>
                    <th>Car Payment</th>
                    <td>- $@asset.CarPayment</td>
                </tr>
                <tr>
                    <th>Insurances</th>
                    <td>- $@asset.Insurances</td>
                </tr>
                <tr>
                    <th>Groceries</th>
                    <td>- $@asset.Groceries</td>
                </tr>
                <tr>
                    <th>Gas</th>
                    <td>- $@asset.Gas</td>
                </tr>
                <tr>
                    <th>Subscriptions</th>
                    <td>- $@asset.Subscriptions</td>
                </tr>
                <tr>
                    <th>Other</th>
                    <td>- $@asset.Other</td>
                </tr>
                <tr>
                    <th>Total Expenses</th>
                    <td id="total-expenses">$</td>
                </tr>
                <tr>
                    <th>Net</th>
                    <td id="net">$</td>
                </tr>
            }
        </thead>
    </table>


    <div class="assets-chart-group">
        <canvas id="assetsChart"></canvas>
    </div>
</div>

<div class="form-buttons">
    <div class="add-to-balance-group">
        <label for="amount-to-add">Add to Balance</label>
        <input id="amount-to-add" type="text" placeholder="Type amount here" />
        <button id="add-to-balance-button" class="button">Submit</button>
    </div>

    <div class="subtract-from-balance-group"">
        <label for="amount-to-subtract">Subtract from Balance</label>
        <input id="amount-to-subtract" type="text" placeholder="Type amount here" />
        <button id="subtract-from-balance-button" class="button">Submit</button>
    </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        // Calculate the total expenses and net gain/loss and create a doughnut chart to represent the budgeted expenses
        const $assetTables = $('.assets-table-div table');

        // Iterate through each table in the asset tables div
        $assetTables.each(function () {
            let totalExpenses = 0;
            let totalIncome = 0;
            let balance = 0;

            const expenseLabels = [];
            const expenseData = [];

            // Get all table records in the current table
            const $rows = $(this).find('tr');

            // Iterate through each row in the current table
            $rows.each(function () {
                const $headerCell = $(this).find('th'); // Get all table header cells
                const $valueCell = $(this).find('td');   // Get all table data cells

                // If a table data cell exists in the current row
                if ($valueCell.length) {
                    const header = $headerCell.text().trim();
                    const valueText = $valueCell.text().trim();
                    const numericValue = parseFloat(valueText.replace(/[^\d.]/g, ''));

                    // Determine which expense it is and add or subtract from totalIncome accordingly
                    if (header === 'Balance') {
                        balance = numericValue;
                    } else if (header === 'Income') {
                        totalIncome += numericValue;
                    } else if (['Rent', 'Savings', 'Utilities', 'Car Payment', 'Insurances', 'Groceries', 'Gas', 'Subscriptions', 'Other'].includes(header)) {
                        totalExpenses += numericValue;
                        expenseLabels.push(header);
                        expenseData.push(numericValue);
                    } else if (header === 'Total Expenses') {
                        $valueCell.text(`- $${totalExpenses.toFixed(2)}`);
                    } else if (header === 'Net') {
                        let netAmount = totalIncome - totalExpenses;
                        if (netAmount < 0) {
                            netAmount = -1 * netAmount;
                            $valueCell.text(`- $${netAmount.toFixed(2)}`).css('color', 'red');
                        } else {
                            $valueCell.text(`$${netAmount.toFixed(2)}`).css('color', 'green');
                        }
                    }
                }
            });

            // Create the doughnut chart
            if (expenseLabels.length > 0) {
                new Chart("assetsChart", {
                    type: "doughnut",
                    data: {
                        labels: expenseLabels,
                        datasets: [{
                            backgroundColor: [
                                "red", "orange", "yellow", "green", "cyan", "blue", "indigo", "violet", "magenta"
                            ],
                            borderColor: [
                                "black", "black", "black", "black", "black", "black", "black", "black", "black"
                            ],
                            data: expenseData
                        }]
                    },
                    options: {
                        title: {
                            display: true,
                            text: "Cost Breakdown",
                            fontColor: 'white'
                        },
                        legend: {
                            labels: {
                                fontColor: 'white',
                                borderColor: 'black'
                            }
                        }
                    }
                });
            }
        });

        // Sends the amount to add to the balance to the appropriate controller
        $('#add-to-balance-button').on('click', function () {
            const amountToAddInput = $('#amount-to-add');
            const amountValue = amountToAddInput.val();

            if (!amountValue.trim()) {
                alert('Please enter an amount to add.');
                return;
            }

            fetch('@Url.Action("AddToBalance", "Home")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `amountToAdd=${amountValue}`
            })
                .then(response => {
                    if (response.ok) {
                        window.location.reload();
                        console.log('Balance updated successfully!');
                    } else {
                        console.error('Failed to update balance.');
                        alert('Failed to update balance.');
                    }
                })
                .catch(error => {
                    console.error('There was an error:', error);
                    alert('An error occurred while updating the balance.');
                });
        });

        // Sends the amount to subtract from the balance to the appropriate controller
        $('#subtract-from-balance-button').on('click', function () {
            const amountToSubtractInput = $('#amount-to-subtract');
            const amountValue = amountToSubtractInput.val();

            if (!amountValue.trim()) {
                alert('Please enter an amount to subtract.');
                return;
            }

            fetch('@Url.Action("SubtractFromBalance", "Home")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `amountToSubtract=${amountValue}`
            })
                .then(response => {
                    if (response.ok) {
                        window.location.reload();
                        console.log('Balance updated successfully!');
                    } else {
                        console.error('Failed to update balance.');
                        alert('Failed to update balance.');
                    }
                })
                .catch(error => {
                    console.error('There was an error:', error);
                    alert('An error occurred while updating the balance.');
                });
        });
    });
</script>